---
apiVersion: v1
kind: Namespace
metadata:
  name: ns-recreate
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: ns-recreate
  name: deployment-my-app
  labels:
    app: my-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: my-app
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9101"
        prometheus.io/path: "/metrics"
        prometheus.io/scheme: "http"
    spec:
      terminationGracePeriodSeconds: 100
      containers:
      - name: my-app
        image: containersol/k8s-deployment-strategies
        ports:
        - name: http
          containerPort: 8080
        - name: probe
          containerPort: 8086
        env:
        - name: VERSION
          value: v1.0.0
        livenessProbe:
          httpGet:
            path: /live
            port: probe
          initialDelaySeconds: 5
          periodSeconds: 5
        readinessProbe:
          httpGet:
            path: /ready
            port: probe
          periodSeconds: 5
        lifecycle:
          preStop:
            exec:
              command: ["sleep","90"]
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: ns-recreate
  name: ingress-recreate
  annotations:
    kubernetes.io/ingress.class: azure/application-gateway
    appgw.ingress.kubernetes.io/connection-draining: "true"
    appgw.ingress.kubernetes.io/connection-draining-timeout: "30"
spec:
  rules:
  - http:
      paths:
      - path: /
        pathType: Exact
        backend:
          service:
            name: svc-my-app
            port:
              number: 80
---
apiVersion: v1
kind: Service
metadata:
  namespace: ns-recreate
  name: svc-my-app
  labels:
    app: my-app
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
  selector:
    app: my-app